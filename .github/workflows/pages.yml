name: GitHub Pages Deployment

on:
  push:
    branches: ["main"]
  workflow_dispatch:
  repository_dispatch:
    types: 
      - content-update

permissions:
  contents: write
  pages: write
  id-token: write
  actions: write

jobs:
  update-content:
    if: github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Debug Event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event type: ${{ github.event.action }}"
          echo "Page ID: ${{ github.event.client_payload.pageId }}"
          echo "Content received: true"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Update Content
        env:
          CONTENT_UPDATE: ${{ github.event.client_payload.content }}
          PAGE_ID: ${{ github.event.client_payload.pageId }}
        run: |
          # Debug info
          echo "Updating content for page: $PAGE_ID"
          echo "Content length: ${#CONTENT_UPDATE}"
          
          # Determine file path
          if [ "$PAGE_ID" = "index" ]; then
            FILE_PATH="src/index.html"
          elif [ "$PAGE_ID" = "blog/index" ]; then
            FILE_PATH="src/pages/blog.html"
          else
            FILE_PATH="src/pages/${PAGE_ID}.html"
          fi
          
          echo "Writing to file: $FILE_PATH"
          
          # Ensure directory exists
          mkdir -p "$(dirname "$FILE_PATH")"
          
          # Format content before writing
          # Remove any extra whitespace and ensure proper indentation
          echo "$CONTENT_UPDATE" | sed 's/^[ \t]*//;s/[ \t]*$//' > "$FILE_PATH"
          
          # Verify file was written
          if [ -f "$FILE_PATH" ]; then
            echo "File updated successfully"
            echo "Content preview:"
            head -n 20 "$FILE_PATH"
          else
            echo "Failed to write file"
            exit 1
          fi

      - name: Commit changes
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          # Check if there are any changes to commit
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add .
            git commit -m "Update content for ${{ github.event.client_payload.pageId }} [skip ci]"
            git push
          fi

  build-and-deploy:
    needs: [update-content]
    if: |
      always() && 
      (needs.update-content.result == 'success' || github.event_name != 'repository_dispatch')
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      # Pull latest changes including the content update
      - uses: actions/checkout@v4
        with:
          ref: main  # Explicitly checkout main branch to get latest changes
          fetch-depth: 0  # Get full history

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        env:
          NODE_ENV: production
        run: |
          npm install -g vite
          npm install
          npm install --frozen-lockfile

      - name: Build website
        env:
          BASE_URL: '/portfolio'
        run: |
          # Clean dist directory
          rm -rf dist
          
          # Install prettier
          npm install --save-dev prettier@^3.1.0
          
          # Fix menu icons in all HTML files
          echo "Fixing menu icons..."
          find src -name "*.html" -exec sed -i 's/â°/☰/g' {} \;
          find src -name "*.html" -exec sed -i 's/&#x2260;/☰/g' {} \;
          
          # Format HTML files before build
          echo "Formatting HTML files..."
          npx prettier --write "src/**/*.html"
          
          # Build site
          npm run build
          
          # Debug output
          echo "Built files in dist:"
          ls -la dist/
          echo "Content of contact page:"
          cat dist/pages/contact.html

      - name: Deploy to gh-pages branch
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist
          branch: gh-pages
          clean: true
          commit-message: "Deploy to GitHub Pages [skip ci]"

      # These steps ensure GitHub Pages is updated
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4